{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/caxpy.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport scabs1 from '@stdlib/blas-base-scabs1';\nimport cmulf from '@stdlib/complex-float32-base-mul';\nimport caddf from '@stdlib/complex-float32-base-add';\n\n\n// MAIN //\n\n/**\n* Scales a single-precision complex floating-point vector by a single-precision complex floating-point constant and adds the result to a single-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64} alpha - scalar constant\n* @param {Complex64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {integer} offsetX - starting index for `x`\n* @param {Complex64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {integer} offsetY - starting index for `y`\n* @returns {Complex64Array} second input array\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32-ctor';\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = new Complex64( 2.0, 2.0 );\n*\n* caxpy( 3, alpha, x, 1, 0, y, 1, 0 );\n* // y => <Complex64Array>[ -1.0, 7.0, -1.0, 15.0, -1.0, 23.0 ]\n*/\nfunction caxpy( N, alpha, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 || scabs1( alpha ) === 0.0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty.set( caddf( cmulf( alpha, x.get( ix ) ), y.get( iy ) ), iy );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default caxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Scales a single-precision complex floating-point vector by a single-precision complex floating-point constant and adds the result to a single-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64} alpha - scalar constant\n* @param {Complex64Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Complex64Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {Complex64Array} second input array\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32-ctor';\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = new Complex64( 2.0, 2.0 );\n*\n* caxpy( 3, alpha, x, 1, y, 1 );\n* // y => <Complex64Array>[ -1.0, 7.0, -1.0, 15.0, -1.0, 23.0 ]\n*/\nfunction caxpy( N, alpha, x, strideX, y, strideY ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, alpha, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default caxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport caxpy from './caxpy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( caxpy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default caxpy;\n"],"names":["caxpy","N","alpha","x","strideX","offsetX","y","strideY","offsetY","ix","iy","i","scabs1","set","caddf","cmulf","get","ndarray","stride2offset","setReadOnly"],"mappings":";;8fAqDA,SAASA,EAAOC,EAAGC,EAAOC,EAAGC,EAASC,EAASC,EAAGC,EAASC,GAC1D,IAAIC,EACAC,EACAC,EAEJ,GAAKV,GAAK,GAAyB,IAApBW,EAAQV,GACtB,OAAOI,EAIR,IAFAG,EAAKJ,EACLK,EAAKF,EACCG,EAAI,EAAGA,EAAIV,EAAGU,IACnBL,EAAEO,IAAKC,EAAOC,EAAOb,EAAOC,EAAEa,IAAKP,IAAQH,EAAEU,IAAKN,IAAQA,GAC1DD,GAAML,EACNM,GAAMH,EAEP,OAAOD,CACR,CCnBA,SAASN,EAAOC,EAAGC,EAAOC,EAAGC,EAASE,EAAGC,GAGxC,OAAOU,EAAShB,EAAGC,EAAOC,EAAGC,EAFpBc,EAAejB,EAAGG,GAEeE,EAAGC,EADpCW,EAAejB,EAAGM,GAE5B,CCzBAY,EAAAnB,EAAA,UAAAiB"}